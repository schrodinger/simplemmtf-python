#!/usr/bin/env python
'''
Example program which converts MMTF to mmCIF

Copyright (C) Schrodinger, Inc.
Author: Thomas Holder
License: BSD-3-Clause

'''

import re

re_cifsimpledatavalue_match = re.compile(r'[^_#\$\'"\[\];]\S*$').match
re_cifendsinglequote_search = re.compile(r"'\s").search
re_cifenddoublequote_search = re.compile(r'"\s').search

def cifisreserved(s):
    '''return true if s is a reserved cif keyword'''
    return s in ('loop_', 'stop_', 'global_') or s[:5] in ('data_', 'save_')

def cifrepr(s):
    '''returns s, if s is a simple data value, or some quoted version of s'''
    if not s:
        return '.'
    if not cifisreserved(s) and re_cifsimpledatavalue_match(s) is not None:
        return s
    if '\n' not in s:
        if re_cifendsinglequote_search(s) is None:
            return "'" + s + "'"
        if re_cifenddoublequote_search(s) is None:
            return '"' + s + '"'
    if '\n;' in s:
        print(' Warning: CIF data value contains <newline><semicolon>')
        s = s.replace('\n;', '\n ;')
    return '\n;' + s + '\n;'

def mmtf2mmcif(data):
    '''
    @type data: simplemmtf.MmtfDict
    @rtype: str
    '''

    buf = ['# generated by mmtf2cif\n']

    structureId = data.get('structureId')
    buf.append('data_%s\n' % (structureId or 'mmtfexport'))

    if structureId:
        buf.append('_entry.id %s\n' % (cifrepr(structureId)))

    unitCell = data.get('unitCell')
    if unitCell and len(unitCell) == 6:
        buf.append('''#
_cell.length_a %f
_cell.length_b %f
_cell.length_c %f
_cell.angle_alpha %f
_cell.angle_beta %f
_cell.angle_gamma %f
''' % tuple(unitCell))

    spaceGroup = data.get('spaceGroup')
    if spaceGroup:
        buf.append('_symmetry.space_group_name_H-M %s\n' % cifrepr(spaceGroup))

    chainIdList = data.get_noiter('chainIdList')
    entityMapping = {}
    entityList = data.get('entityList')
    if entityList:
        buf.append('''#
loop_
_entity.id
_entity.type
_entity.details
''')
        entity_id = 0
        for entity in entityList:
            entity_id += 1
            buf.append('%d %s %s\n' % (entity_id,
                cifrepr(entity.get('type', '')),
                cifrepr(entity.get('description', '')),
                ))
            for chainIndex in entity['chainIndexList']:
                entityMapping[chainIdList[chainIndex]] = str(entity_id)

    if data.get('numAtoms', 0) > 0:
        buf.append('''#
loop_
_atom_site.group_PDB
_atom_site.id
_atom_site.type_symbol
_atom_site.label_atom_id
_atom_site.label_alt_id
_atom_site.label_comp_id
_atom_site.label_asym_id
_atom_site.label_entity_id
_atom_site.label_seq_id
_atom_site.pdbx_PDB_ins_code
_atom_site.Cartn_x
_atom_site.Cartn_y
_atom_site.Cartn_z
_atom_site.occupancy
_atom_site.B_iso_or_equiv
_atom_site.pdbx_formal_charge
_atom_site.auth_asym_id
_atom_site.pdbx_PDB_model_num
''')

        for atom in data.atoms():
            x, y, z = atom['coords']
            buf.append('%-6s %-3d %s %-3s '
                '%s %-3s %s %s '
                '%-2s %s %6.3f %6.3f %6.3f '
                '%4.2f %6.2f %d %s %d\n' % (
                    'HETATOM' if atom['sequenceIndex'] == -1 else 'ATOM',
                    atom['atomId'],
            cifrepr(atom['element']),
            cifrepr(atom['atomName']),
            cifrepr(atom['altLoc']),
            cifrepr(atom['groupName']),
            cifrepr(atom['chainId']),
            cifrepr(entityMapping.get(atom['chainId'])),
            atom['sequenceIndex'] + 1,
            cifrepr(atom['insCode']),
            x, y, z,
            atom['occupancy'],
            atom['bFactor'],
            atom['formalCharge'],
            cifrepr(atom['chainName']),
            atom['modelIndex'] + 1,
        ))

    return ''.join(buf)

if __name__ == '__main__':
    import sys
    import simplemmtf
    for filename in sys.argv[1:]:
        d = simplemmtf.from_url(filename)
        print(mmtf2mmcif(d))

